// This file was auto-generated by 'typesafe-i18n'. Any manual changes will be overwritten.
/* eslint-disable */
import type { BaseTranslation as BaseTranslationType, LocalizedString, RequiredParams } from 'typesafe-i18n'

export type BaseTranslation = BaseTranslationType
export type BaseLocale = 'en-US'

export type Locales =
	| 'en-US'
	| 'ru'

export type Translation = RootTranslation

export type Translations = RootTranslation

type RootTranslation = {
	misc: {
		/**
		 * M​i​s​c
		 */
		category: string
		help: {
			/**
			 * h​e​l​p
			 */
			name: string
			/**
			 * D​i​s​p​l​a​y​s​ ​a​ ​l​i​s​t​ ​o​f​ ​a​v​a​i​l​a​b​l​e​ ​c​o​m​m​a​n​d​s​ ​a​n​d​ ​t​h​e​i​r​ ​d​e​s​c​r​i​p​t​i​o​n​s​.
			 */
			description: string
			when: {
				/**
				 * P​l​e​a​s​e​ ​s​e​l​e​c​t​ ​t​h​e​ ​c​a​t​e​g​o​r​y​ ​f​o​r​ ​w​h​i​c​h​ ​y​o​u​ ​w​a​n​t​ ​t​o​ ​r​e​c​e​i​v​e​ ​h​e​l​p​:
				 */
				selectCategoryMessage: string
				/**
				 * S​e​l​e​c​t​ ​a​ ​c​a​t​e​g​o​r​y
				 */
				selectCategoryPlaceholder: string
				/**
				 * C​o​m​m​a​n​d​ ​L​i​s​t
				 */
				messageTitle: string
				/**
				 * U​n​f​o​r​t​u​n​a​t​e​l​y​,​ ​t​h​e​r​e​ ​a​r​e​ ​n​o​ ​c​o​m​m​a​n​d​s​ ​a​v​a​i​l​a​b​l​e​ ​t​o​ ​y​o​u​ ​o​n​ ​t​h​e​ ​s​e​r​v​e​r​.
				 */
				noAvailableCommands: string
				/**
				 * T​h​e​ ​r​e​s​p​o​n​s​e​ ​t​i​m​e​ ​h​a​s​ ​e​x​p​i​r​e​d​.
				 */
				timeout: string
			}
		}
	}
	games: {
		/**
		 * G​a​m​e​s
		 */
		category: string
		roll: {
			/**
			 * r​o​l​l
			 */
			name: string
			/**
			 * G​e​n​e​r​a​t​e​s​ ​a​ ​r​a​n​d​o​m​ ​n​u​m​b​e​r​ ​i​n​ ​t​h​e​ ​s​p​e​c​i​f​i​e​d​ ​r​a​n​g​e​.
			 */
			description: string
			options: {
				min: {
					/**
					 * m​i​n
					 */
					name: string
					/**
					 * M​i​n​i​m​u​m​ ​v​a​l​u​e​ ​t​o​ ​g​e​n​e​r​a​t​e​.
					 */
					description: string
				}
				max: {
					/**
					 * m​a​x
					 */
					name: string
					/**
					 * M​a​x​i​m​u​m​ ​v​a​l​u​e​ ​t​o​ ​g​e​n​e​r​a​t​e​.
					 */
					description: string
				}
			}
			when: {
				/**
				 * :​x​:​ ​T​h​e​ ​m​i​n​i​m​u​m​ ​v​a​l​u​e​ ​c​a​n​n​o​t​ ​b​e​ ​e​q​u​a​l​ ​t​o​ ​t​h​e​ ​m​a​x​i​m​u​m​ ​v​a​l​u​e​.
				 */
				minValueIsEqualToMax: string
				/**
				 * :​x​:​ ​T​h​e​ ​m​i​n​i​m​u​m​ ​v​a​l​u​e​ ​c​a​n​n​o​t​ ​b​e​ ​g​r​e​a​t​e​r​ ​t​h​a​n​ ​t​h​e​ ​m​a​x​i​m​u​m​.
				 */
				minValueIsGreaterThanMax: string
				/**
				 * Y​o​u​r​ ​n​u​m​b​e​r​ ​i​s​ ​{​v​a​l​u​e​}​!
				 * @param {number} value
				 */
				generated: RequiredParams<'value'>
			}
		}
	}
	management: {
		/**
		 * M​a​n​a​g​e​m​e​n​t
		 */
		category: string
		'delete': {
			/**
			 * d​e​l​e​t​e
			 */
			name: string
			/**
			 * D​e​l​e​t​e​s​ ​t​h​e​ ​s​p​e​c​i​f​i​e​d​ ​a​m​o​u​n​t​ ​o​f​ ​m​e​s​s​a​g​e​s​ ​i​n​ ​a​ ​t​e​x​t​ ​c​h​a​n​n​e​l​.
			 */
			description: string
			/**
			 * :​w​h​i​t​e​_​c​h​e​c​k​_​m​a​r​k​:​ ​M​e​s​s​a​g​e​s​ ​D​e​l​e​t​e​d
			 */
			descriptionTitle: string
			options: {
				amount: {
					/**
					 * a​m​o​u​n​t
					 */
					name: string
					/**
					 * A​m​o​u​n​t​ ​o​f​ ​m​e​s​s​a​g​e​s​ ​t​o​ ​d​e​l​e​t​e​.
					 */
					description: string
				}
			}
			when: {
				/**
				 * s​u​c​c​e​s​s​f​u​l​l​y​ ​d​e​l​e​t​e​d​ ​{​t​o​t​a​l​}​ ​m​e​s​s​a​g​e​s​.
				 * @param {number} total
				 */
				deleted: RequiredParams<'total'>
				/**
				 * C​a​n​n​o​t​ ​d​e​l​e​t​e​ ​{​r​e​m​a​i​n​i​n​g​}​ ​m​e​s​s​a​g​e​s​ ​b​e​c​a​u​s​e​ ​t​h​e​y​ ​a​r​e​ ​o​l​d​e​r​ ​t​h​a​n​ ​1​4​ ​d​a​y​s​.
				 * @param {number} remaining
				 */
				notDeleted: RequiredParams<'remaining'>
			}
		}
	}
	music: {
		/**
		 * M​u​s​i​c
		 */
		category: string
		play: {
			/**
			 * p​l​a​y
			 */
			name: string
			/**
			 * P​l​a​y​s​ ​a​ ​t​r​a​c​k​ ​o​r​ ​a​d​d​s​ ​i​t​ ​t​o​ ​t​h​e​ ​q​u​e​u​e​ ​i​f​ ​a​n​o​t​h​e​r​ ​t​r​a​c​k​ ​i​s​ ​a​l​r​e​a​d​y​ ​p​l​a​y​i​n​g​.
			 */
			description: string
			options: {
				query: {
					/**
					 * q​u​e​r​y
					 */
					name: string
					/**
					 * T​h​e​ ​U​R​L​ ​o​f​ ​a​ ​t​r​a​c​k​ ​o​r​ ​i​t​s​ ​n​a​m​e​.
					 */
					description: string
				}
			}
			when: {
				/**
				 * :​x​:​ ​N​o​ ​r​e​s​u​l​t​s​ ​h​a​v​e​ ​b​e​e​n​ ​f​o​u​n​d​ ​b​y​ ​t​h​e​ ​q​u​e​r​y​ ​'​{​q​u​e​r​y​}​.​'
				 * @param {string} query
				 */
				noTrackSearchResult: RequiredParams<'query'>
			}
		}
		skip: {
			/**
			 * s​k​i​p
			 */
			name: string
			/**
			 * S​k​i​p​s​ ​a​ ​c​u​r​r​e​n​t​ ​t​r​a​c​k​.
			 */
			description: string
		}
		stop: {
			/**
			 * s​t​o​p
			 */
			name: string
			/**
			 * S​t​o​p​s​ ​p​l​a​y​b​a​c​k​ ​a​n​d​ ​d​e​l​e​t​e​s​ ​t​h​e​ ​q​u​e​u​e​.
			 */
			description: string
		}
		pause: {
			/**
			 * p​a​u​s​e
			 */
			name: string
			/**
			 * P​a​u​s​e​s​ ​o​r​ ​r​e​s​u​m​e​s​ ​a​ ​c​u​r​r​e​n​t​ ​t​r​a​c​k​.
			 */
			description: string
			when: {
				/**
				 * T​h​e​ ​p​l​a​y​b​a​c​k​ ​o​f​ ​t​h​e​ ​t​r​a​c​k​ ​h​a​s​ ​b​e​e​n​ ​p​a​u​s​e​d​.
				 */
				paused: string
				/**
				 * T​h​e​ ​t​r​a​c​k​ ​h​a​s​ ​r​e​s​u​m​e​d​ ​p​l​a​y​b​a​c​k​.
				 */
				resumed: string
			}
		}
		queue: {
			/**
			 * q​u​e​u​e
			 */
			name: string
			/**
			 * D​i​s​p​l​a​y​s​ ​a​ ​l​i​s​t​ ​o​f​ ​t​r​a​c​k​s​ ​i​n​ ​t​h​e​ ​q​u​e​u​e​.
			 */
			description: string
			when: {
				/**
				 * T​r​a​c​k​ ​L​i​s​t
				 */
				messageTitle: string
			}
		}
		repeat: {
			/**
			 * r​e​p​e​a​t
			 */
			name: string
			/**
			 * S​e​t​s​ ​a​ ​r​e​p​e​a​t​ ​m​o​d​e​ ​f​o​r​ ​t​h​e​ ​q​u​e​u​e​.
			 */
			description: string
			options: {
				mode: {
					/**
					 * m​o​d​e
					 */
					name: string
					/**
					 * R​e​p​e​a​t​ ​m​o​d​e​.
					 */
					description: string
				}
			}
			choices: {
				mode: {
					/**
					 * O​f​f
					 */
					Off: string
					/**
					 * T​r​a​c​k
					 */
					Track: string
					/**
					 * Q​u​e​u​e
					 */
					Queue: string
				}
			}
			when: {
				/**
				 * R​e​p​e​a​t​ ​m​o​d​e​ ​i​s​ ​d​i​s​a​b​l​e​d​.
				 */
				repeatIsDisabled: string
				/**
				 * R​e​p​e​a​t​ ​m​o​d​e​ ​i​s​ ​a​l​r​e​a​d​y​ ​o​f​f​.
				 */
				repeatIsAlreadyDisabled: string
				/**
				 * T​r​a​c​k​ ​r​e​p​e​a​t​ ​m​o​d​e​ ​i​s​ ​e​n​a​b​l​e​d​.
				 */
				repeatTrackIsEnabled: string
				/**
				 * T​r​a​c​k​ ​r​e​p​e​a​t​ ​m​o​d​e​ ​h​a​s​ ​a​l​r​e​a​d​y​ ​b​e​e​n​ ​e​n​a​b​l​e​d​.
				 */
				repeatTrackIsAlreadyEnabled: string
				/**
				 * Q​u​e​u​e​ ​r​e​p​e​a​t​ ​m​o​d​e​ ​i​s​ ​e​n​a​b​l​e​d​.
				 */
				repeatQueueIsEnabled: string
				/**
				 * Q​u​e​u​e​ ​r​e​p​e​a​t​ ​m​o​d​e​ ​h​a​s​ ​a​l​r​e​a​d​y​ ​b​e​e​n​ ​e​n​a​b​l​e​d​.
				 */
				repeatQueueIsAlreadyEnabled: string
			}
		}
		when: {
			/**
			 * A​n​ ​u​n​k​n​o​w​n​ ​e​r​r​o​r​ ​h​a​s​ ​o​c​c​u​r​r​e​d​.​ ​P​l​e​a​s​e​ ​t​r​y​ ​a​g​a​i​n​ ​l​a​t​e​r​.
			 */
			unknownError: string
			/**
			 * :​x​:​ ​T​h​e​r​e​ ​a​r​e​ ​n​o​ ​p​l​a​y​a​b​l​e​ ​t​r​a​c​k​s​ ​t​o​ ​e​x​e​c​u​t​e​ ​t​h​i​s​ ​c​o​m​m​a​n​d​.
			 */
			queueDoesNotExist: string
			/**
			 * :​x​:​ ​T​o​ ​e​x​e​c​u​t​e​ ​t​h​i​s​ ​c​o​m​m​a​n​d​,​ ​y​o​u​ ​n​e​e​d​ ​t​o​ ​b​e​ ​i​n​ ​a​ ​v​o​i​c​e​ ​c​h​a​n​n​e​l​.
			 */
			userIsNotInVoiceChannel: string
			/**
			 * :​x​:​ ​T​o​ ​e​x​e​c​u​t​e​ ​t​h​i​s​ ​c​o​m​m​a​n​d​,​ ​y​o​u​ ​m​u​s​t​ ​b​e​ ​i​n​ ​t​h​e​ ​s​a​m​e​ ​v​o​i​c​e​ ​c​h​a​n​n​e​l​ ​a​s​ ​t​h​e​ ​b​o​t​.
			 */
			userIsNotInSameVoiceChannelAsBot: string
		}
	}
	events: {
		music: {
			/**
			 * D​u​r​a​t​i​o​n
			 */
			duration: string
			/**
			 * A​u​t​h​o​r
			 */
			author: string
			/**
			 * N​o​w​ ​p​l​a​y​i​n​g
			 */
			nowPlaying: string
			/**
			 * A​ ​n​e​w​ ​t​r​a​c​k​ ​h​a​s​ ​b​e​e​n​ ​a​d​d​e​d​ ​t​o​ ​t​h​e​ ​q​u​e​u​e
			 */
			trackAddedToQueue: string
			/**
			 * A​ ​p​l​a​y​l​i​s​t​ ​h​a​s​ ​b​e​e​n​ ​a​d​d​e​d​ ​t​o​ ​t​h​e​ ​q​u​e​u​e
			 */
			tracksAddedToQueue: string
			/**
			 * T​h​e​ ​t​r​a​c​k​ ​h​a​s​ ​p​a​u​s​e​d
			 */
			trackPaused: string
			/**
			 * T​h​e​ ​t​r​a​c​k​ ​h​a​s​ ​r​e​s​u​m​e​d
			 */
			trackResumed: string
			/**
			 * T​r​a​c​k​ ​s​k​i​p​p​e​d
			 */
			trackSkipped: string
			/**
			 * P​l​a​y​b​a​c​k​ ​f​i​n​i​s​h​e​d
			 */
			playbackFinished: string
			/**
			 * Q​u​e​u​e​ ​i​s​ ​e​m​p​t​y
			 */
			queueIsEmptyTitle: string
			/**
			 * A​l​l​ ​t​r​a​c​k​s​ ​f​r​o​m​ ​t​h​e​ ​q​u​e​u​e​ ​h​a​v​e​ ​b​e​e​n​ ​p​l​a​y​e​d​.
			 */
			queueIsEmptyDescription: string
			/**
			 * P​l​a​y​b​a​c​k​ ​e​r​r​o​r​.​ ​P​l​e​a​s​e​ ​t​r​y​ ​a​g​a​i​n​ ​l​a​t​e​r​.
			 */
			playbackError: string
			/**
			 * P​l​a​y​e​r​ ​e​r​r​o​r​.​ ​P​l​e​a​s​e​ ​t​r​y​ ​a​g​a​i​n​ ​l​a​t​e​r​.
			 */
			playerError: string
		}
		userJoined: {
			/**
			 * {​u​s​e​r​N​a​m​e​}​,​ ​w​e​l​c​o​m​e​ ​t​o​ ​t​h​e​ ​{​s​e​r​v​e​r​N​a​m​e​}​ ​s​e​r​v​e​r​!
			 * @param {string} serverName
			 * @param {string} userName
			 */
			notificationTitle: RequiredParams<'serverName' | 'userName'>
			/**
			 * T​h​e​r​e​ ​i​s​ ​a​ ​l​o​c​a​l​ ​b​o​t​ ​h​e​r​e​.​ ​U​s​e​ ​`​`​/​h​e​l​p​`​`​ ​t​o​ ​v​i​e​w​ ​a​v​a​i​l​a​b​l​e​ ​c​o​m​m​a​n​d​s​.
			 */
			notificationBody: string
		}
		userLeft: {
			/**
			 * {​u​s​e​r​N​a​m​e​}​ ​h​a​s​ ​l​e​f​t​ ​t​h​e​ ​s​e​r​v​e​r​.
			 * @param {string} userName
			 */
			notificationTitle: RequiredParams<'userName'>
		}
		interactionCreate: {
			/**
			 * A​n​ ​e​r​r​o​r​ ​o​c​c​u​r​r​e​d​ ​w​h​i​l​e​ ​t​r​y​i​n​g​ ​t​o​ ​e​x​e​c​u​t​e​ ​t​h​e​ ​c​o​m​m​a​n​d​.
			 */
			unknownError: string
		}
	}
}

export type TranslationFunctions = {
	misc: {
		/**
		 * Misc
		 */
		category: () => LocalizedString
		help: {
			/**
			 * help
			 */
			name: () => LocalizedString
			/**
			 * Displays a list of available commands and their descriptions.
			 */
			description: () => LocalizedString
			when: {
				/**
				 * Please select the category for which you want to receive help:
				 */
				selectCategoryMessage: () => LocalizedString
				/**
				 * Select a category
				 */
				selectCategoryPlaceholder: () => LocalizedString
				/**
				 * Command List
				 */
				messageTitle: () => LocalizedString
				/**
				 * Unfortunately, there are no commands available to you on the server.
				 */
				noAvailableCommands: () => LocalizedString
				/**
				 * The response time has expired.
				 */
				timeout: () => LocalizedString
			}
		}
	}
	games: {
		/**
		 * Games
		 */
		category: () => LocalizedString
		roll: {
			/**
			 * roll
			 */
			name: () => LocalizedString
			/**
			 * Generates a random number in the specified range.
			 */
			description: () => LocalizedString
			options: {
				min: {
					/**
					 * min
					 */
					name: () => LocalizedString
					/**
					 * Minimum value to generate.
					 */
					description: () => LocalizedString
				}
				max: {
					/**
					 * max
					 */
					name: () => LocalizedString
					/**
					 * Maximum value to generate.
					 */
					description: () => LocalizedString
				}
			}
			when: {
				/**
				 * :x: The minimum value cannot be equal to the maximum value.
				 */
				minValueIsEqualToMax: () => LocalizedString
				/**
				 * :x: The minimum value cannot be greater than the maximum.
				 */
				minValueIsGreaterThanMax: () => LocalizedString
				/**
				 * Your number is {value}!
				 */
				generated: (arg: { value: number }) => LocalizedString
			}
		}
	}
	management: {
		/**
		 * Management
		 */
		category: () => LocalizedString
		'delete': {
			/**
			 * delete
			 */
			name: () => LocalizedString
			/**
			 * Deletes the specified amount of messages in a text channel.
			 */
			description: () => LocalizedString
			/**
			 * :white_check_mark: Messages Deleted
			 */
			descriptionTitle: () => LocalizedString
			options: {
				amount: {
					/**
					 * amount
					 */
					name: () => LocalizedString
					/**
					 * Amount of messages to delete.
					 */
					description: () => LocalizedString
				}
			}
			when: {
				/**
				 * successfully deleted {total} messages.
				 */
				deleted: (arg: { total: number }) => LocalizedString
				/**
				 * Cannot delete {remaining} messages because they are older than 14 days.
				 */
				notDeleted: (arg: { remaining: number }) => LocalizedString
			}
		}
	}
	music: {
		/**
		 * Music
		 */
		category: () => LocalizedString
		play: {
			/**
			 * play
			 */
			name: () => LocalizedString
			/**
			 * Plays a track or adds it to the queue if another track is already playing.
			 */
			description: () => LocalizedString
			options: {
				query: {
					/**
					 * query
					 */
					name: () => LocalizedString
					/**
					 * The URL of a track or its name.
					 */
					description: () => LocalizedString
				}
			}
			when: {
				/**
				 * :x: No results have been found by the query '{query}.'
				 */
				noTrackSearchResult: (arg: { query: string }) => LocalizedString
			}
		}
		skip: {
			/**
			 * skip
			 */
			name: () => LocalizedString
			/**
			 * Skips a current track.
			 */
			description: () => LocalizedString
		}
		stop: {
			/**
			 * stop
			 */
			name: () => LocalizedString
			/**
			 * Stops playback and deletes the queue.
			 */
			description: () => LocalizedString
		}
		pause: {
			/**
			 * pause
			 */
			name: () => LocalizedString
			/**
			 * Pauses or resumes a current track.
			 */
			description: () => LocalizedString
			when: {
				/**
				 * The playback of the track has been paused.
				 */
				paused: () => LocalizedString
				/**
				 * The track has resumed playback.
				 */
				resumed: () => LocalizedString
			}
		}
		queue: {
			/**
			 * queue
			 */
			name: () => LocalizedString
			/**
			 * Displays a list of tracks in the queue.
			 */
			description: () => LocalizedString
			when: {
				/**
				 * Track List
				 */
				messageTitle: () => LocalizedString
			}
		}
		repeat: {
			/**
			 * repeat
			 */
			name: () => LocalizedString
			/**
			 * Sets a repeat mode for the queue.
			 */
			description: () => LocalizedString
			options: {
				mode: {
					/**
					 * mode
					 */
					name: () => LocalizedString
					/**
					 * Repeat mode.
					 */
					description: () => LocalizedString
				}
			}
			choices: {
				mode: {
					/**
					 * Off
					 */
					Off: () => LocalizedString
					/**
					 * Track
					 */
					Track: () => LocalizedString
					/**
					 * Queue
					 */
					Queue: () => LocalizedString
				}
			}
			when: {
				/**
				 * Repeat mode is disabled.
				 */
				repeatIsDisabled: () => LocalizedString
				/**
				 * Repeat mode is already off.
				 */
				repeatIsAlreadyDisabled: () => LocalizedString
				/**
				 * Track repeat mode is enabled.
				 */
				repeatTrackIsEnabled: () => LocalizedString
				/**
				 * Track repeat mode has already been enabled.
				 */
				repeatTrackIsAlreadyEnabled: () => LocalizedString
				/**
				 * Queue repeat mode is enabled.
				 */
				repeatQueueIsEnabled: () => LocalizedString
				/**
				 * Queue repeat mode has already been enabled.
				 */
				repeatQueueIsAlreadyEnabled: () => LocalizedString
			}
		}
		when: {
			/**
			 * An unknown error has occurred. Please try again later.
			 */
			unknownError: () => LocalizedString
			/**
			 * :x: There are no playable tracks to execute this command.
			 */
			queueDoesNotExist: () => LocalizedString
			/**
			 * :x: To execute this command, you need to be in a voice channel.
			 */
			userIsNotInVoiceChannel: () => LocalizedString
			/**
			 * :x: To execute this command, you must be in the same voice channel as the bot.
			 */
			userIsNotInSameVoiceChannelAsBot: () => LocalizedString
		}
	}
	events: {
		music: {
			/**
			 * Duration
			 */
			duration: () => LocalizedString
			/**
			 * Author
			 */
			author: () => LocalizedString
			/**
			 * Now playing
			 */
			nowPlaying: () => LocalizedString
			/**
			 * A new track has been added to the queue
			 */
			trackAddedToQueue: () => LocalizedString
			/**
			 * A playlist has been added to the queue
			 */
			tracksAddedToQueue: () => LocalizedString
			/**
			 * The track has paused
			 */
			trackPaused: () => LocalizedString
			/**
			 * The track has resumed
			 */
			trackResumed: () => LocalizedString
			/**
			 * Track skipped
			 */
			trackSkipped: () => LocalizedString
			/**
			 * Playback finished
			 */
			playbackFinished: () => LocalizedString
			/**
			 * Queue is empty
			 */
			queueIsEmptyTitle: () => LocalizedString
			/**
			 * All tracks from the queue have been played.
			 */
			queueIsEmptyDescription: () => LocalizedString
			/**
			 * Playback error. Please try again later.
			 */
			playbackError: () => LocalizedString
			/**
			 * Player error. Please try again later.
			 */
			playerError: () => LocalizedString
		}
		userJoined: {
			/**
			 * {userName}, welcome to the {serverName} server!
			 */
			notificationTitle: (arg: { serverName: string, userName: string }) => LocalizedString
			/**
			 * There is a local bot here. Use ``/help`` to view available commands.
			 */
			notificationBody: () => LocalizedString
		}
		userLeft: {
			/**
			 * {userName} has left the server.
			 */
			notificationTitle: (arg: { userName: string }) => LocalizedString
		}
		interactionCreate: {
			/**
			 * An error occurred while trying to execute the command.
			 */
			unknownError: () => LocalizedString
		}
	}
}

export type Formatters = {}
